// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model refresh_token {
  id           String   @id @unique @default(uuid())
  hashed_token String
  user_id      String
  User         user     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  revoked      Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model user {
  user_id                String          @id @default(uuid())
  email                  String          @unique
  name                   String
  surname                String
  password               String
  refreshTokens          refresh_token[]
  created_at             DateTime        @default(now())
  updated_at             DateTime        @updatedAt
  team                   team[]
  owns_team              team[]          @relation("team_owner_id")
  participates_in_league league[]
}

model user_in_team {
  user_id String
  team_id String

  @@id([user_id, team_id])
}

model participant {
  participant_id   String  @id @default(uuid())
  team             team[]
  match_as_local   match[] @relation("local")
  match_as_visitor match[] @relation("visitor")
  match_winner     match[] @relation("match_winner")
}

model team {
  team_id        String      @id @default(uuid())
  team_name      String
  players        user[]
  team_owner     user        @relation("team_owner_id", fields: [team_owner_id], references: [user_id])
  team_owner_id  String
  participant    participant @relation(fields: [participant_id], references: [participant_id])
  participant_id String
}

model user_in_league {
  user_id             String
  league_id           String
  is_league_moderator Boolean @default(false)

  @@id([user_id, league_id])
}

model league {
  league_id             String        @id @default(uuid())
  name                  String
  is_team_based         Boolean       @default(false)
  matches               match[]
  status                league_status @default(NOT_STARTED)
  maximum_participants  Int?
  allow_late_join       Boolean       @default(true)
  type                  league_type?
  start_date            DateTime?
  end_date              DateTime?
  match_can_end_in_draw Boolean       @default(false)
  user                  user[]
}

enum league_type {
  ELO
  POINTS
  // SWISS
  // ROUND_ROBIN
  // SINGLE_KNOCKOUT
  // DOUBLE_KNOCKOUT
  // LOSER_BRACKET
}

enum league_status {
  ACTIVE
  FINISHED
  NOT_STARTED
}

model match {
  match_id               String       @id @default(uuid())
  league                 league[]
  match_status           match_status
  visitor                participant  @relation("visitor", fields: [visitor_participant_id], references: [participant_id])
  visitor_participant_id String
  local                  participant  @relation("local", fields: [local_participant_id], references: [participant_id])
  local_participant_id   String
  created_at             DateTime     @default(now())
  match_winner           participant? @relation("match_winner", fields: [winner_id], references: [participant_id])
  winner_id              String?
  draw                   Boolean?
}

enum match_status {
  PENDING
  FINISHED
  CANCELLED
}
